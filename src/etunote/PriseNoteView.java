package etunote;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import javax.swing.AbstractAction;
import javax.swing.GroupLayout.Group;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.JToolBar;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.JOptionPane;

public class PriseNoteView extends PanelView implements ActionListener {
	
    // Variables declaration
    private JButton BlocButton;
//    private JButton CodeButton;
//    private JButton DrawButton;
    private JButton BoldButton;
    private JButton ImageButton;
    private JButton ItalicButton;
//    private JButton ListeButton;
    private JButton ParagraphButton;
    private JButton SoulignButton;
//    private JButton SurlignButton;
    private JButton TitleButton;
    private JPanel notePanel;
    private JScrollPane jTreePane;
    private JScrollPane noteScrollPane;
    private JTabbedPane jTabbedPane1;
    private JTree jTree;
    private JComponent lastComponentAdded;
    private JToolBar toolBar;
    
    
	int numerotationTitle[] = {0,0,0,0,0,0};
	Note noteModel;
	Application app;
	Persistance pe;
	javax.swing.GroupLayout notePanelLayout;
	JFileChooser fc = new JFileChooser();
	String file;
	private JScrollPane scrollPane;
	
	// End of variables declaration
	
    public PriseNoteView(Note model) {
    	super();
    	this.noteModel = model;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
    	DefaultTreeModel Model=new DefaultTreeModel(null);
    	app = noteModel.getUvs().get(0).getSemesters().get(0).getApplication();
		pe = new Persistance();
    	
    	scrollPane = new javax.swing.JScrollPane();
        jTreePane = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        noteScrollPane = new javax.swing.JScrollPane();
        notePanel = new javax.swing.JPanel();
        BlocButton = new javax.swing.JButton();
        ParagraphButton = new javax.swing.JButton();
        TitleButton = new javax.swing.JButton();
//        CodeButton = new javax.swing.JButton();
//        DrawButton = new javax.swing.JButton();
        BoldButton = new javax.swing.JButton();
        SoulignButton = new javax.swing.JButton();
        ItalicButton = new javax.swing.JButton();
//        SurlignButton = new javax.swing.JButton();
//        ListeButton = new javax.swing.JButton();
        ImageButton = new javax.swing.JButton();

        
        toolBar = new JToolBar(JToolBar.VERTICAL);
        toolBar.setRollover(true);

        
// JPanel        
//        this.setTitle("Prise de Note");
//        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTreePane.setBackground(new java.awt.Color(0, 102, 102));
        jTreePane.setViewportView(jTree);

        
        //SHOW THE CONTENT OF THE NOTE
        notePanel = updateNoteContent();
        
        noteScrollPane.setViewportView(notePanel);

        jTabbedPane1.addTab("Note de Cours", noteScrollPane);
        
               
        AbstractAction addTitle = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
            	addTitle();
            }
        };
        
        AbstractAction addBloc = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
            	addBloc();
            }
        };
        
        AbstractAction addParagraph = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
            	addParagraph();
            }
        };
        
        AbstractAction addImage = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
            	addImage();
            }
        };
        
        
        getActionMap().put("addTitle", addTitle);
        getActionMap().put("addBloc", addBloc);
        getActionMap().put("addParagraph", addParagraph);
        getActionMap().put("addImage", addImage);

        InputMap[] inputMaps = new InputMap[] {
            getInputMap(JComponent.WHEN_FOCUSED),
            getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT),
            getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
        };
        for(InputMap i : inputMaps) {
        	i.put(KeyStroke.getKeyStroke(KeyEvent.VK_T, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "addTitle");
            i.put(KeyStroke.getKeyStroke(KeyEvent.VK_B, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "addBloc");
            i.put(KeyStroke.getKeyStroke(KeyEvent.VK_P, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "addParagraph");
            i.put(KeyStroke.getKeyStroke(KeyEvent.VK_I, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "addImage");
        }
        
        
        TitleButton.setIcon(new ImageIcon(Tools.getPathToIcons("title.png")));
        TitleButton.addActionListener(addTitle);

        BlocButton.setIcon(new ImageIcon(Tools.getPathToIcons("bloc.png")));
        BlocButton.addActionListener(addBloc);
       

        ParagraphButton.setIcon(new ImageIcon(Tools.getPathToIcons("paragraph.png")));
        ParagraphButton.addActionListener(addParagraph);
        
        ImageButton.setIcon(new ImageIcon(Tools.getPathToIcons("image.png")));
        ImageButton.addActionListener(addImage);
        
        
//        CodeButton.setText("+C");
//        CodeButton.setBackground(Color.red);
//        CodeButton.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                CodeButtonActionPerformed(evt);
//            }
//        });

//        DrawButton.setText("+D");
//        DrawButton.setBackground(Color.red);
//        DrawButton.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                DrawButtonActionPerformed(evt);
//            }
//        });

		BoldButton.setIcon(new ImageIcon(Tools.getPathToIcons("format-text-bold.png")));

		SoulignButton.setIcon(new ImageIcon(Tools.getPathToIcons("format-text-underline.png")));

        ItalicButton.setIcon(new ImageIcon(Tools.getPathToIcons("format-text-italic.png")));

//        SurlignButton.setText("Surlign");
//        SurlignButton.setBackground(Color.gray);
//        SurlignButton.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                SurlignButtonActionPerformed(evt);
//            }
//        });

//        ListeButton.setFont(new java.awt.Font("Times New Roman", 0, 12));
//        ListeButton.setText("Liste");
//        ListeButton.setBackground(Color.gray);
//        ListeButton.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                ListeButtonActionPerformed(evt);
//            }
//        });


        
        //Show the button of the left toolbar
        toolBar.add(TitleButton);
        toolBar.add(ParagraphButton);
        toolBar.add(BlocButton);
        toolBar.add(ImageButton);
        
        toolBar.addSeparator();
        
        toolBar.add(BoldButton);
        toolBar.add(ItalicButton);
        toolBar.add(SoulignButton);
       

        scrollPane.setViewportView(this);
        //Set a simple layout
        this.setLayout(new BorderLayout());
        this.add(jTreePane, BorderLayout.WEST);
        this.add(jTabbedPane1, BorderLayout.CENTER);
        this.add(toolBar, BorderLayout.EAST);

    }


//    private void CodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CodeButtonActionPerformed
//        // TODO add your handling code here:
//    }//GEN-LAST:event_CodeButtonActionPerformed
//
//    private void DrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawButtonActionPerformed
//        // TODO add your handling code here:
//    }//GEN-LAST:event_DrawButtonActionPerformed


//    private void SurlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SurlignButtonActionPerformed
//        // TODO add your handling code here:
//    }//GEN-LAST:event_SurlignButtonActionPerformed
//
//    private void ListeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListeButtonActionPerformed
//        // TODO add your handling code here:
//    }//GEN-LAST:event_ListeButtonActionPerformed

    private void addTitle() {
    	Title title = new Title(this.noteModel.getLastPosition() + 1, this.noteModel.getLastTitleLevel());
    	this.noteModel.addContent(title);
    	notePanel = updateNoteContent();
    }

    private void addParagraph() {
    	Paragraph p = new Paragraph(this.noteModel.getLastPosition() + 1);
    	this.noteModel.addContent(p);
    	notePanel = updateNoteContent();
    }

    private void addBloc() {
    	Bloc b = new Bloc(this.noteModel.getLastPosition() + 1, "info");
    	this.noteModel.addContent(b);
    	notePanel = updateNoteContent();
    }
    
    private void addImage() {
    	FileSystemView fw = fc.getFileSystemView(); 
    	fc.setCurrentDirectory(fw.getDefaultDirectory());
		int returnVal = fc.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			try{
				file = fc.getSelectedFile().getAbsolutePath();
		    	Image img = new Image(this.noteModel.getLastPosition() + 1, file);
		    	this.noteModel.addContent(img);
		    	notePanel = updateNoteContent();
				
			}
			catch(Exception e)
			{
				JOptionPane.showMessageDialog(this, 
						"Probleme fichier",
						"Erreur",
						JOptionPane.ERROR_MESSAGE);
			}
			
		}
    }


	
	public JPanel updateNoteContent(){
		try {
			pe.export(app);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		for(int i=0; i<6;i++){
        	numerotationTitle[i] = 0;
        }
		notePanel.removeAll();
        notePanelLayout=new javax.swing.GroupLayout(notePanel);
        //javax.swing.GroupLayout notePanelLayout = new javax.swing.GroupLayout(notePanel);
        notePanel.setLayout(notePanelLayout);
        notePanelLayout.setAutoCreateGaps(true);
        
        Group parallelGroup = notePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING);
        Group verticalGroup = notePanelLayout.createSequentialGroup();
        
        
        
        for (final Content c : this.noteModel.getContents()){
        	if(c instanceof Title){
        		final JTextField f = new JTextField();
        		lastComponentAdded = f;
        		f.setText(((Title) c).getName());
        		
        		f.addKeyListener(new KeyListener() {
					
					@Override
					public void keyTyped(KeyEvent arg0) {
						// TODO Auto-generated method stub
						
					}
					
					@Override
					public void keyReleased(KeyEvent arg0) {
						saveTitle(f, (Title) c);
						
					}
					
					@Override
					public void keyPressed(KeyEvent arg0) {
						// TODO Auto-generated method stub
						
					}
				});
        		if(((Title) c).getLevel() == 1){
                    parallelGroup.addGroup(notePanelLayout.createSequentialGroup()
                    	.addGap(5, 5, 5)
                    	.addComponent(f, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE));
                    	
              	
                    verticalGroup.addGroup(notePanelLayout.createParallelGroup()
                    	.addGap(20, 20, 20)
                    	.addComponent(f, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE));
        		}
        		else{
        		JButton levelDown = new JButton();
        		
        		Tools.addImageAsButton(levelDown, "go-previous.png");
        		levelDown.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    	downTitleLevel((Title) c);
                        
                    }
                });
        		
        		JButton levelUp = new JButton();
        		Tools.addImageAsButton(levelUp, "go-next.png");
        		levelUp.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        upTitleLevel((Title) c);
                    }
                });
                f.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                int level = ((Title) c).getLevel() -1;
                int indent = level * 20;
                for(int i=level+1; i<6;i++){
                	numerotationTitle[i] = 0;
                }
                numerotationTitle[level]++;
                String num = "";
                for(int i=1; i<=level;i++){
                	num += numerotationTitle[i] + ".";
                }
                JLabel number = new JLabel(num);
                number.setFont(new Font("arial", Font.BOLD, 18));
                parallelGroup.addGroup(notePanelLayout.createSequentialGroup()
                	.addGap(indent, indent, indent)
                	.addComponent(levelDown)
                	.addComponent(number)
                	.addComponent(f, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                	.addComponent(levelUp));
                	
          	
                verticalGroup.addGroup(notePanelLayout.createParallelGroup()
                	.addGap(20, 20, 20)
                	.addComponent(levelDown)
                	.addComponent(number)
                	.addComponent(f, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                	.addComponent(levelUp));
                
                if(level == 1){
                	levelDown.setVisible(false);
                }
                
                if(level == 5){
                	levelUp.setVisible(false);
                }
        		}   	
        	}
        	
        	else if(c instanceof Paragraph){
        		HTMLEditorKit editorkit = new HTMLEditorKit();
        		final JTextPane textArea = new JTextPane();
        		lastComponentAdded = textArea;
        		textArea.setContentType("text/html");
        		textArea.setEditable (true);
        		textArea.setEditorKit(editorkit);
//        		JScrollPane scrollPane = new JScrollPane( textArea );
        		textArea.setText(((Paragraph) c).getText());
        		textArea.addFocusListener(new FocusListener() {
					
					@Override
					public void focusLost(FocusEvent e) {
						// TODO Auto-generated method stub
						
					}
					
					@Override
					public void focusGained(FocusEvent e) {
						setActiveEditor(textArea);
						
					}
				});
        		textArea.addKeyListener(new KeyListener() {
					
					@Override
					public void keyTyped(KeyEvent arg0) {
						// TODO Auto-generated method stub
						
					}
					
					@Override
					public void keyReleased(KeyEvent arg0) {
						saveParagraph(textArea, (Paragraph) c);
						
					}
					
					@Override
					public void keyPressed(KeyEvent arg0) {
						// TODO Auto-generated method stub
						
					}
				});
        		
        		
        		if(c instanceof Bloc){
        			textArea.setBackground(((Bloc) c).getColor());
        			 final JComboBox typeComboBox = new JComboBox();
        			 typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(Bloc.getTypes()));
        			 typeComboBox.setSelectedItem(((Bloc) c).getType());
        			 typeComboBox.addActionListener(new java.awt.event.ActionListener() {
        		            public void actionPerformed(java.awt.event.ActionEvent evt) {
        		            	((Bloc) c).setType((String) typeComboBox.getSelectedItem());
        		            	textArea.setBackground(((Bloc) c).getColor());
        		            }
        		        });
        			 parallelGroup.addGroup(notePanelLayout.createSequentialGroup()
        	                	.addComponent(typeComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE));
        	                	
        	          	
        	                verticalGroup.addGroup(notePanelLayout.createSequentialGroup()
        	                	.addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE));
        	                	
        			 
        		}
//        		textArea.firePropertyChange(arg0, arg1, arg2);
        		textArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                parallelGroup.addGroup(notePanelLayout.createSequentialGroup()
                	.addGap(10, 10, 10)
                	.addComponent(textArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE)
                	.addGap(10, 10, 10));
                	
          	
                verticalGroup.addGroup(notePanelLayout.createSequentialGroup()
                	.addGap(20, 20, 20)
                	.addComponent(textArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE));
                	
        	}
        	
        	else if(c instanceof Image){
        		
        		JLabel img = new JLabel(((Image) c).getImage());
        		parallelGroup.addGroup(notePanelLayout.createSequentialGroup()
                    	.addGap(10, 10, 10)
                    	.addComponent(img, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE)
                    	.addGap(10, 10, 10));
                    	
              	
                verticalGroup.addGroup(notePanelLayout.createSequentialGroup()
                	.addGap(20, 20, 20)
                	.addComponent(img, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE));
                	
        	}
        }
        
        
        notePanelLayout.setHorizontalGroup(parallelGroup);
        notePanelLayout.setVerticalGroup(verticalGroup);
        
        SwingUtilities.invokeLater(new Runnable() {
  		  public void run() {
  			  lastComponentAdded.requestFocus();
  		  }
  		});
        
        
        //Scroll to the end of the panel to see the new component
        Rectangle visible = notePanel.getVisibleRect();
        Rectangle bounds = notePanel.getBounds();
        visible.y = bounds.height;
        notePanel.scrollRectToVisible(visible);
        
        
        noteScrollPane.getVerticalScrollBar().setUnitIncrement(16);
		return notePanel;

	}

	private void setActiveEditor(JTextPane textArea) {
		Action a = textArea.getActionMap().get("font-bold");
		if (a != null){
			this.BoldButton.setAction(a);
			BoldButton.setText("");
			BoldButton.setIcon(new ImageIcon(Tools.getPathToIcons("format-text-bold.png")));
		}
			
		a = textArea.getActionMap().get("font-italic");
		if (a != null){
			this.ItalicButton.setAction(a);
			ItalicButton.setText("");
			ItalicButton.setIcon(new ImageIcon(Tools.getPathToIcons("format-text-italic.png")));
		}
		
		a = textArea.getActionMap().get("font-underline");
		if (a != null){
			this.SoulignButton.setAction(a);
			SoulignButton.setText("");
			SoulignButton.setIcon(new ImageIcon(Tools.getPathToIcons("format-text-underline.png")));
		}
		
	}

	public Note getNoteModel() {
		return noteModel;
	}

	public void setNoteModel(Note noteModel) {
		this.noteModel = noteModel;
	}

	protected void saveParagraph(JTextPane textArea, Paragraph p) {
		String text = textArea.getText()
						.replaceAll("\\<.*head?>","")
						.replaceAll("\\<.*html?>","")
						.replaceAll("\\<.*body?>","");
		
		p.setText(text);
		
	}

	protected void saveTitle(JTextField f, Title t) {
		t.setName(f.getText());
	}

	protected void downTitleLevel(Title c) {
		c.levelDown();
		this.noteModel.downLastTitleLevel();
        notePanel = updateNoteContent();
		
	}
	
	protected void upTitleLevel(Title c) {
		c.levelUp();
		this.noteModel.upLastTitleLevel();
        notePanel = updateNoteContent();
		
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		
	}
	
}
